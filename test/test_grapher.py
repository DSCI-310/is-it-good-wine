import numpy as np
import pandas as pd
from src.grapher import correlation_table, bar_chart, vis_tree, compare_scores, show_coefficients, show_correct
import altair
from matplotlib import pyplot as plt
import pytest
from sklearn.dummy import DummyClassifier

# dummy data

dummy = pd.read_csv('data/winequality-red.csv', sep=',')[0:10]
dummy_X = dummy.drop(columns = ['quality'])
dummy_y = dummy['quality']
pipe = DummyClassifier(strategy='most_frequent').fit(dummy_X, dummy_y)

# test whether the graphing function returns the correct types of Charts or output
def test_correlation_table():
    # DESCRIPTION: Compare the type of chart returned by correlation_table is the expected type
    # ACTION: use assert and == function to compare the type of chart
    # RETURNS: return errors message if the type of chart is not the expected type, return none if the test pass

    assert type(correlation_table(dummy)) == altair.vegalite.v4.api.Chart
    
def test_bar_chart():
    # DESCRIPTION: Compare the type of chart returned by bar_chart is the expected type
    # ACTION: use assert and == function to compare the type of chart
    # RETURNS: return errors message if the type of chart is not the expected type, return none if the test pass
    
    assert type(bar_chart(dummy)) == altair.vegalite.v4.api.Chart
    
def test_vis_tree():
    # DESCRIPTION: Compare the type of chart returned by vis_tree is the expected type
    # ACTION: use assert and == function to compare the type of chart
    # RETURNS: return errors message if the type of chart is not the expected type, return none if the test pass
    
    assert vis_tree(dummy_X, dummy_y) is None
    plt.close()
    
def test_compare_scores():
    # DESCRIPTION: Compare the type of chart returned by compare_scores is the expected type
    # ACTION: use assert and == function to compare the type of chart
    # RETURNS: return errors message if the type of chart is not the expected type, return none if the test pass
    
    assert type(compare_scores([1,2,3,4,5])) == altair.vegalite.v4.api.Chart

    
    
# test whether this function returns the correct number of True prediction
def test_show_correct():
    # DESCRIPTION: Compare the the number of true cases generated by show_correct to the real answer
    # ACTION: use assert and == function to compare the value of true cases
    # RETURNS: return errors message if number of true cases not equals the acutal true cases, return none if the test pass
    assert show_correct(pipe, dummy_X, dummy_y)[True] == 7